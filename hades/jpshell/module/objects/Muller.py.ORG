import java.io
import jp_sim_control
import hades.models 
import hades.models.gates 
import hades.gui.Console
from hades.models import PortStdLogic1164, StdLogic1164
from hades.simulator import Port
from jarray import array

class Muller (hades.models.gates.GenericGate,
            hades.simulator.Simulatable,
            java.io.Serializable):
    '''
    Muller-C-Gate
    AB|Y
    00|0
    10|alter wert
    01|alter wert
    11|1 
    '''
    def __init__(self):
        hades.models.gates.GenericGate.__init__(self)
        self.name = "i0"
        self.console = hades.gui.Console.getConsole()
        self.visible = 0
	#self.symbolResourceName = "/hades/jpshell/module/objects/MullerC_V.sym"

        self.debug = 0
       
        self.port_Y = PortStdLogic1164( self, "Y", Port.OUT, None )
        self.port_A = PortStdLogic1164( self, "A", Port.IN, None )
        self.port_B = PortStdLogic1164( self, "B", Port.IN, None )
        self.next_Y = StdLogic1164( StdLogic1164._U )
        self.old_value = StdLogic1164( StdLogic1164._U )
        self.t_delay = 10.0E-9; # 10ns, twice inverter

        ports = array( [self.port_A, self.port_B, self.port_Y], Port )
	self.setPorts(ports)

        self.symbol_type = "horizontal"

        if self.debug:
            print self



    def elaborate(self, arg):
        if self.debug:
            print "Muller.elaborate("+str(arg)+")"
            
        self.simulator = jp_sim_control.getSimulator()


    def evaluate(self, arg):
        if self.debug:
            print "Muller.evaluate("+str(arg)+")"

        signal_Y = self.port_Y.getSignal()
        if self.debug:
            from hades.signals import SignalStdLogic1164
            signal_Y = SignalStdLogic1164()
            print "signal_Y:",signal_Y

        if signal_Y == None:
            return

        value_A = self.port_A.getValueOrU()
        value_B = self.port_B.getValueOrU()
        if self.debug:
            #value_A = StdLogic1164( StdLogic1164._1 )
            #value_B = StdLogic1164( StdLogic1164._1 )
            print "value_A, value_B",value_A, value_B
       
        if value_A == value_B:
            self.next_Y.setToAnd( value_A, value_B )
            self.old_value = self.next_Y
        else:
            self.next_Y=self.old_value
        if self.debug:
            print "self.next_Y, self.old_value", self.next_Y, self.old_value

            
        hades.models.gates.GenericGate.scheduleEventAfter( self,
                                                           signal_Y,
                                                           self.t_delay,
                                                           self.next_Y,
                                                           self.port_Y ) 

    def getClass(self):
		return "hades.jpshell.models.object.Muller"

    def getSymbolResourceName(self):
        if self.symbol_type == "vertikal":
            return "/hades/jpshell/module/objects/MullerC_V.sym"
        else:
            return "/hades/jpshell/module/objects/MullerC_H.sym"

        
    def setSymbolType(self, type):
        self.symbol_type = type

        
    def setDebug(self, debug):
        self.debug=debug


    def test(self):
        self.setDebug(1)
        
        if self.debug:
            print "start muller test...."

        #warum gehts das nicht?    
        self.port_A.setValue(StdLogic1164( StdLogic1164._1 ))
        self.port_B.setValue(StdLogic1164( StdLogic1164._1 ))
       
        value_A = self.port_A.getValueOrU()
        value_B = self.port_B.getValueOrU()
        if self.debug:
            print value_A, value_B
       
        self.evaluate("test")

        self.setDebug(0)

    
    def __str__(self):
        if self.debug:
            return "Muller: \n"+\
                   str(self.port_Y)+",\n"+\
                   str(self.port_A)+",\n"+\
                   str(self.port_B)+",\n"+\
                   str(self.next_Y)+",\n"+\
                   str(self.t_delay)
        return "Muller: "+ self.getFullName()


class LogicBlock (hades.models.gates.GenericGate,
            hades.simulator.Simulatable,
            java.io.Serializable):
    '''
    LogicBlock
    Wenn neue stabile Ausgangsdaten vorhanden sind, wird ein REQ (Request) an den Nachfolger geschickt.
    Wenn neue Daten aufgenommen werden können, wird ein ACK (Acknowledge) an den Vorgänger geschickt.
    A--[LogicBlock]--Y
    ?? Wie bilde ich REQ und ACK ab ???
    ?? Wie verbinde ich den Handshake mit den HADES-Events ??
    '''


    def __init__(self):
        hades.models.gates.GenericGate.__init__(self)
        self.debug = 0

        self.port_Y = PortStdLogic1164( self, "Y", Port.OUT, None )
        self.port_A = PortStdLogic1164( self, "A", Port.IN, None )




